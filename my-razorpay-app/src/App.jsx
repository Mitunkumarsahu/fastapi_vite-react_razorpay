import React, { useState } from 'react';

function App() {
  // State variables to hold form input
  const [formData, setFormData] = useState({
    amount: '',
    currency: 'INR',
    receipt: 'Yo',        //This field is used internally by Razorpay to track the transaction. It's a unique identifier for your order and is often used to map the order to an internal system or database.It could be any unique string or identifier generated by your backend, like an order number, transaction ID, etc. we can use a random number generator to generate a unique receipt number for each transaction along with recipient name. I have hardcoded here, we can change this to any unique value
    name: '',
    email: '',
    contact: '',          //don't forget to get the country code as well along with the phone number
    address: '',
  });

  // Handle input change
  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const createOrder = async () => {
    try {
      // Calling the backend to create an order
      const response = await fetch('http://127.0.0.1:8000/create_order/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: formData.amount,
          currency: formData.currency,
          receipt: formData.receipt,
        }),
      });

      const order = await response.json();

      // Initialize Razorpay payment
      const options = {
        key: 'rzp_test_oh2NWyI3QrMr75', // Razorpay API Key - we have to generate this from razorpay dashboard
        amount: order.amount,
        currency: order.currency,
        name: 'Your Company Name',                   //pocketstylist
        description: 'Test Transaction',             //pocketstylist description for amount to be paid
        order_id: order.id,
        handler: function (response) {
          // Verifying the payment on the backend
          verifyPayment(response.razorpay_payment_id, response.razorpay_order_id, response.razorpay_signature);
        },
        prefill: {                                   // recipient data which will be prefilled in the payment form provided by razorpay
          name: formData.name,                        //recipient name
          email: formData.email,                     //recipient mail for otp and billing/reciept
          contact: formData.contact,                 //valid phone number to get otp for payment depending on the type of transaction want to do
        },
        notes: {
          address: formData.address,                  //for address proof
        },
        theme: {                          //we can set the theme according to our app
          color: '#3399cc',
        },
      };

      const rzp = new window.Razorpay(options);
      rzp.open();
    } catch (error) {
      console.error('Error creating order:', error);
    }
  };

  const verifyPayment = async (payment_id, order_id, signature) => {
    try {
      // Call the backend to verify the payment
      const response = await fetch('http://127.0.0.1:8000/verify_payment/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({                                   //sending the payment id, order id and signature to the backend for verification
          razorpay_payment_id: payment_id,
          razorpay_order_id: order_id,
          razorpay_signature: signature,
        }),
      });

      const result = await response.json();

      if (result.status === 'Payment successful') {
        alert('Payment Successful');
      } else {
        alert('Payment Verification Failed');
      }
    } catch (error) {
      console.error('Error verifying payment:', error);
    }
  };

  return (
    <div>
      <h1>Razorpay Payment Integration</h1>
      <form>
        <label>
          Amount:
          <input          //don't give this field for user/recipient , we can directly send the amount to razrpay payment form or else user can change the amount which needs to be paid
            type="number"
            name="amount"
            value={formData.amount}
            onChange={handleInputChange}
            required
          />
        </label>
        <br />
        <label>
          Currency:
          <input          // i have hard coded this value to INR, we can change this to any currency we want to use by giving the dropdown option 
            type="text"
            name="currency"
            value={formData.currency}
            onChange={handleInputChange}
            required
          />
        </label>
        <br />
        <label>
          Receipt:
          <input
            type="text"
            name="receipt"
            value={formData.receipt}
            onChange={handleInputChange}
            required
          />
        </label>
        <br />
        <label>
          Name:
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleInputChange}
            required
          />
        </label>
        <br />
        <label>
          Email:
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
            required
          />
        </label>
        <br />
        <label>
          Contact:
          <input
            type="tel"
            name="contact"
            value={formData.contact}
            onChange={handleInputChange}
            required
          />
        </label>
        <br />
        <label>
          Address:
          <input
            type="text"
            name="address"
            value={formData.address}
            onChange={handleInputChange}
            required
          />
        </label>
        <br />
        <button type="button" onClick={createOrder}>
          Pay Now
        </button>
      </form>
    </div>
  );
}

export default App;
